'''
❓ PROMPT
Given a linked list and a target k, return a linked list containing every kth element.

Example(s)
head = 1 -> 3 -> 6 -> 2 -> 8 -> 9
everyKthNode(head, 3) == "6 -> 9"
 

🔎 EXPLORE
List your assumptions & discoveries:
Q: Should I modify the linked list in place or create a copy?
A: Create a copy.
Q: If the target is bigger than the length of the list, should I return null?
A: Yes.
Q: Can the target be less than 1?
A: No.

Insightful & revealing test cases:
empty list
1 node list with target == 1
1 node list with target > 1
2 node list with target == 1
2 node list with target == 2
2 node list with target > 2
list with multiple nodes and is divisible by target
list with multiple nodes and is not divisible by target (there is remainder)

🧠 BRAINSTORM
What approaches could work?
Algorithm 1:
Time: O(m) where m is the number of nodes in the input list
Space: O(n) where n is the number of kth elements
 
'''


#🛠️ IMPLEMENT
class Node:
  def __init__(self, val, next=None):
    self.val = val
    self.next = next

def everyKthNode(node: Node, target: int) -> Node:
    trackList = 1
    curr = node

    dummy = Node(0) #sentinel node
    outputTail = dummy

    if not curr or target < 1:
        return None

    while curr:
        if trackList % target == 0: 
            outputTail.next = Node(curr.val) # make next output node this value
            outputTail = outputTail.next

        trackList += 1
        curr = curr.next

    #delete the sentinel node of output
    dummy = dummy.next

    return dummy


# 🧪 VERIFY
# Run tests. Methodically debug & analyze issues.

# Helper function to print linked list
def toString(head: Node) -> None:
  if not head:
    return "<empty>"

  parts = []
  while head:
    parts.append(str(head.val))
    head = head.next
  return " -> ".join(parts)

# 1 -> 3 -> 6 -> 2 -> 8 -> 9
head = Node(1, Node(3, Node(6, Node(2, Node(8, Node(9))))))
print(toString(everyKthNode(head, 3)) == "6 -> 9")
print(toString(everyKthNode(head, 1)) == "1 -> 3 -> 6 -> 2 -> 8 -> 9")
print(toString(everyKthNode(head, 5)) == "8")
print(toString(everyKthNode(head, 6)) == "9")
print(toString(everyKthNode(head, 7)) == "<empty>")

# 6
head = Node(6)
print(toString(everyKthNode(head, 1)) == "6")
print(toString(everyKthNode(head, 20)) == "<empty>")

# 6 -> 12
head = Node(6, Node(12))
print(toString(everyKthNode(head, 1)) == "6 -> 12")
print(toString(everyKthNode(head, 2)) == "12")

print(toString(everyKthNode(None, 5)) == "<empty>")
